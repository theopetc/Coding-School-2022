// <auto-generated />
using System;
using CarServiceCenter.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarServiceCenter.EF.Migrations
{
    [DbContext(typeof(CarServiceCenterContext))]
    [Migration("20220323121807_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarServiceCenterLibrary.Car", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Brand")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("CarServiceCenterLibrary.MonthlyLedger", b =>
                {
                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Expenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Income")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Year");

                    b.ToTable("MonthlyLedger", (string)null);
                });

            modelBuilder.Entity("CarServiceCenterLibrary.Person", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ID");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("CarServiceCenterLibrary.ServiceTask", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Hours")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("ServiceTask", (string)null);
                });

            modelBuilder.Entity("CarServiceCenterLibrary.Transaction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("CarServiceCenterLibrary.TransactionLine", b =>
                {
                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("EngineerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Hours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PRICE_PER_HOUR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ServiceTaskID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Price");

                    b.HasIndex("TransactionID");

                    b.ToTable("TransactionLines", (string)null);
                });

            modelBuilder.Entity("CarServiceCenterLibrary.Customer", b =>
                {
                    b.HasBaseType("CarServiceCenterLibrary.Person");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("CarServiceCenterLibrary.Engineer", b =>
                {
                    b.HasBaseType("CarServiceCenterLibrary.Person");

                    b.Property<Guid>("ManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SallaryPerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Engineer", (string)null);
                });

            modelBuilder.Entity("CarServiceCenterLibrary.Manager", b =>
                {
                    b.HasBaseType("CarServiceCenterLibrary.Person");

                    b.Property<decimal>("SallaryPerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Manager", (string)null);
                });

            modelBuilder.Entity("CarServiceCenterLibrary.TransactionLine", b =>
                {
                    b.HasOne("CarServiceCenterLibrary.Transaction", null)
                        .WithMany("TransactionLines")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarServiceCenterLibrary.Customer", b =>
                {
                    b.HasOne("CarServiceCenterLibrary.Person", null)
                        .WithOne()
                        .HasForeignKey("CarServiceCenterLibrary.Customer", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarServiceCenterLibrary.Engineer", b =>
                {
                    b.HasOne("CarServiceCenterLibrary.Person", null)
                        .WithOne()
                        .HasForeignKey("CarServiceCenterLibrary.Engineer", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarServiceCenterLibrary.Manager", b =>
                {
                    b.HasOne("CarServiceCenterLibrary.Person", null)
                        .WithOne()
                        .HasForeignKey("CarServiceCenterLibrary.Manager", "ID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarServiceCenterLibrary.Transaction", b =>
                {
                    b.Navigation("TransactionLines");
                });
#pragma warning restore 612, 618
        }
    }
}
